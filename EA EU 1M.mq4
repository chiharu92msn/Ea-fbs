/*
   Generated by EX4-TO-MQ4 decompiler FREEWARE V4.0.451.1 [-]
   Website: http://www.metaquotes.net
   E-mail : support@metaquotes.net
*/
#property copyright "嬴政外汇(www.winzfx.com)"
#property link      "http://www.winzfx.com"
#property show_inputs

//#include <stdlib.mqh>
#import "stdlib.ex4"
   string ErrorDescription(int a0); // DA69CBAFF4D38B87377667EEC549DE5A
#import

extern string Configuration = "==== Configuration ====";
extern int Magic = 880;
extern string OrderCmt = "";
extern string Suffix = "";
extern bool NDDmode = FALSE;
extern bool Show_Debug = FALSE;
extern bool Verbose = FALSE;
extern string TradingSettings = "==== Trade settings ====";
extern bool TradeALLCurrencyPairs = FALSE;
extern double MaxSpread = 26.0;
extern double TakeProfit = 10.0;
extern double StopLoss = 60.0;
extern double TrailingStart = 0.0;
extern double Commission = 7.0;
extern bool UseDynamicVolatilityLimit = TRUE;
extern double VolatilityMultiplier = 125.0;
extern double VolatilityLimit = 180.0;
extern bool UseVolatilityPercentage = TRUE;
extern double VolatilityPercentageLimit = 60.0;
extern bool UseMovingAverage = TRUE;
extern bool UseBollingerBands = TRUE;
extern double Deviation = 1.5;
extern int OrderExpireSeconds = 3600;
extern string Money_Management = "==== Money Management ====";
extern double MinLots = 0.01;
extern double MaxLots = 1000.0;
extern double Risk = 2.0;
extern string Screen_Shooter = "==== Screen Shooter ====";
extern bool TakeShots = FALSE;
extern int DelayTicks = 1;
extern int ShotsPerBar = 1;
string gsa_272[28] = {"EURUSD", "USDJPY", "GBPUSD", "USDCHF", "USDCAD", "AUDUSD", "NZDUSD", "EURJPY", "GBPJPY", "CHFJPY", "CADJPY", "AUDJPY", "NZDJPY", "EURCHF", "EURGBP", "EURCAD", "EURAUD",
      "EURNZD", "GBPCHF", "GBPAUD", "GBPCAD", "GBPNZD", "AUDCHF", "AUDCAD", "AUDNZD", "NZDCHF",
   "NZDCAD", "CADCHF"};
string gsa_276[];
bool gi_unused_280 = FALSE;
bool gi_284 = TRUE;
bool gi_288 = FALSE;
int g_period_292 = 3;
int gi_296 = 0;
int g_digits_300 = 0;
int g_slippage_304 = 3;
int gia_308[30];
int gi_312 = 0;
int g_time_316 = 0;
int g_count_320 = 0;
int gi_324 = 0;
int gi_328 = 0;
int gi_332 = 0;
double g_pips_336 = 0.0;
double gd_unused_344 = 0.0;
double g_lots_352 = 0.1;
double gd_unused_360 = 0.4;
double gd_368 = 1.0;
double g_pips_376 = 5.0;
double g_pips_384 = 10.0;
double g_pips_392 = 20.0;
double gda_400[30];
double gda_404[30];
double gda_408[30];
double gd_412;
double gd_420;
int gi_428;
int gi_432 = -1;
int gi_436 = 3000000;
int gi_440 = 0;

// 2DEB000B57BFAC9D72C14D4ED967B572
void f0_3() {
   f0_15("ads01", 20, 25, 3, "嬴政外汇(WWW.WINZFX.COM)收集整理", 11, "宋体", Lime);
   f0_15("ads02", 1, 10, 3, "QQ群：76758281               ", 11, "Arial", Aqua);
}

// EA6FB34CC4191BEB13982A9271D14591
void f0_15(string a_name_0, int a_x_8, int a_y_12, int a_corner_16, string a_text_20, int a_fontsize_28, string a_fontname_32, color a_color_40 = -1) {
   ObjectCreate(a_name_0, OBJ_LABEL, 0, 0, 0);
   ObjectSet(a_name_0, OBJPROP_XDISTANCE, a_x_8);
   ObjectSet(a_name_0, OBJPROP_YDISTANCE, a_y_12);
   ObjectSet(a_name_0, OBJPROP_CORNER, a_corner_16);
   ObjectSetText(a_name_0, a_text_20, a_fontsize_28, a_fontname_32, a_color_40);
}

// E37F0136AA3FFAF149B351F6A4C948E9
int init() {
   VolatilityPercentageLimit = VolatilityPercentageLimit / 100.0 + 1.0;
   f0_3();
   VolatilityMultiplier /= 10.0;
   ArrayInitialize(gda_408, 0);
   VolatilityLimit *= Point;
   Commission = f0_2(Commission * Point);
   g_digits_300 = Digits;
   int li_0 = MathMax(MarketInfo(Symbol(), MODE_FREEZELEVEL), MarketInfo(Symbol(), MODE_STOPLEVEL));
   if (gi_296 < li_0) gi_296 = li_0;
   if (MathMod(Digits, 2) == 0.0) g_slippage_304 = 0;
   else gi_312 = -1;
   if (MaxLots > MarketInfo(Symbol(), MODE_MAXLOT)) MaxLots = MarketInfo(Symbol(), MODE_MAXLOT);
   if (MinLots < MarketInfo(Symbol(), MODE_MINLOT)) MinLots = MarketInfo(Symbol(), MODE_MINLOT);
   if (TradeALLCurrencyPairs == TRUE) f0_14();
   if (Magic < 0) f0_13();
   start();
   return (0);
}

// 52D46093050F38C27267BCE42543EF60
int deinit() {
   return (0);
}

// EA2B2676C28C0DB26D39331A336C6B92
int start() {
   if (g_digits_300 == 0) return (init());
   f0_11(gda_400, gda_404, gia_308, gd_368);
   f0_7();
   return (0);
}

// 689C35E4872BA754D7230B8ADAA28E48
void f0_7() {
   string ls_0;
   string symbol_8;
   bool bool_16;
   bool li_20;
   int li_unused_24;
   bool li_28;
   int li_32;
   int li_unused_36;
   int ticket_40;
   int datetime_44;
   int li_48;
   int li_52;
   int li_56;
   int pos_60;
   int li_64;
   int index_68;
   int count_72;
   double price_76;
   double price_84;
   double ld_92;
   double ld_100;
   double ld_108;
   double ld_116;
   double order_stoploss_124;
   double order_takeprofit_132;
   double ld_140;
   double ihigh_148;
   double ilow_156;
   double ld_164;
   double ld_172;
   double ld_180;
   double ibands_188;
   double ibands_196;
   double ld_204;
   double ld_212;
   double ld_220;
   double ld_228;
   double ld_236;
   double ld_244;
   double ld_252;
   double ld_260;
   double ld_268;
   double ld_276;
   if (g_time_316 < Time[0]) {
      g_time_316 = Time[0];
      g_count_320 = 0;
   } else g_count_320++;
   if (TradeALLCurrencyPairs == FALSE) {
      gi_332 = 1;
      symbol_8 = Symbol();
   }
   for (int count_284 = 0; count_284 != gi_332; count_284++) {
      symbol_8 = gsa_276[index_68];
      ihigh_148 = iHigh(symbol_8,PERIOD_M1, 0);
      ilow_156 = iLow(symbol_8, PERIOD_M1, 0);
      ld_212 = ihigh_148 - ilow_156;
      ld_164 = iMA(symbol_8, PERIOD_M1, g_period_292, 0, MODE_LWMA, PRICE_LOW, 0);
      ld_172 = iMA(symbol_8, PERIOD_M1, g_period_292, 0, MODE_LWMA, PRICE_HIGH, 0);
      ld_180 = ld_172 - ld_164;
      li_28 = Bid >= ld_164 + ld_180 / 2.0;
      ibands_188 = iBands(symbol_8, PERIOD_M1, g_period_292, Deviation, 0, PRICE_OPEN, MODE_UPPER, 0);
      ibands_196 = iBands(symbol_8, PERIOD_M1, g_period_292, Deviation, 0, PRICE_OPEN, MODE_LOWER, 0);
      ld_204 = ibands_188 - ibands_196;
      li_32 = Bid >= ibands_196 + ld_204 / 2.0;
      li_unused_36 = 0;
      if (UseMovingAverage == FALSE && UseBollingerBands == TRUE && li_32 == 1) {
         li_unused_36 = 1;
         gd_412 = ibands_188;
         gd_420 = ibands_196;
      } else {
         if (UseMovingAverage == TRUE && UseBollingerBands == FALSE && li_28 == 1) {
            li_unused_36 = 1;
            gd_412 = ld_172;
            gd_420 = ld_164;
         } else {
            if (UseMovingAverage == TRUE && UseBollingerBands == TRUE && li_28 == 1 && li_32 == 1) {
               li_unused_36 = 1;
               gd_412 = MathMax(ibands_188, ld_172);
               gd_420 = MathMin(ibands_196, ld_164);
            }
         }
      }
      ld_220 = MathMax(MarketInfo(symbol_8, MODE_FREEZELEVEL), MarketInfo(symbol_8, MODE_STOPLEVEL)) * Point;
      ld_228 = Ask - Bid;
      if (ld_220 > 1.0 * Point) {
         li_20 = FALSE;
         ld_100 = MaxSpread * Point;
         ld_236 = g_pips_384 * Point;
         ld_108 = g_pips_376 * Point;
      } else {
         li_20 = TRUE;
         ld_100 = g_pips_392 * Point;
         ld_236 = g_pips_336 * Point;
         ld_108 = TrailingStart * Point;
      }
      ld_100 = MathMax(ld_100, ld_220);
      if (li_20) ld_236 = MathMax(ld_236, ld_220);
      ArrayCopy(gda_408, gda_408, 0, 1, 29);
      gda_408[29] = ld_228;
      if (gi_324 < 30) gi_324++;
      ld_244 = 0;
      pos_60 = 29;
      for (int count_288 = 0; count_288 < gi_324; count_288++) {
         ld_244 += gda_408[pos_60];
         pos_60--;
      }
      ld_252 = ld_244 / gi_324;
      ld_260 = f0_2(Ask + Commission);
      ld_268 = f0_2(Bid - Commission);
      ld_276 = ld_252 + Commission;
      if (UseDynamicVolatilityLimit == TRUE) VolatilityLimit = ld_276 * VolatilityMultiplier;
      li_64 = 0;
      if (ld_212 && VolatilityLimit && gd_420 && gd_412) {
         if (ld_212 > VolatilityLimit) {
            ld_92 = ld_212 / VolatilityLimit;
            if (UseVolatilityPercentage == FALSE || (UseVolatilityPercentage == TRUE && ld_92 > VolatilityPercentageLimit)) {
               if (Bid < gd_420) li_64 = -1;
               else
                  if (Bid > gd_412) li_64 = 1;
            }
         } else ld_92 = 0;
      }
      ld_116 = MathMax(ld_220, ld_116);
      if (Bid == 0.0 || MarketInfo(symbol_8, MODE_LOTSIZE) == 0.0) ld_116 = 0;
      datetime_44 = TimeCurrent() + OrderExpireSeconds;
      if (MarketInfo(symbol_8, MODE_LOTSTEP) == 0.0) li_48 = 5;
      else li_48 = f0_8(0.1, MarketInfo(symbol_8, MODE_LOTSTEP));
      if (Risk < 0.001 || Risk > 100.0) {
         Comment("ERROR -- Invalid Risk Value.");
         return;
      }
      if (AccountBalance() <= 0.0) {
         Comment("ERROR -- Account Balance is " + DoubleToStr(MathRound(AccountBalance()), 0));
         return;
      }
      g_lots_352 = f0_4(symbol_8);
      index_68 = 0;
      count_72 = 0;
      for (pos_60 = 0; pos_60 < OrdersTotal(); pos_60++) {
         OrderSelect(pos_60, SELECT_BY_POS, MODE_TRADES);
         if (OrderMagicNumber() == Magic && OrderCloseTime() == 0) {
            if (OrderSymbol() != symbol_8) {
               count_72++;
               continue;
            }
            switch (OrderType()) {
            case OP_BUY:
               if (gi_284) {
                  order_stoploss_124 = OrderStopLoss();
                  order_takeprofit_132 = OrderTakeProfit();
                  if (order_takeprofit_132 < f0_2(ld_260 + ld_100) && ld_260 + ld_100 - order_takeprofit_132 > ld_108) {
                     order_stoploss_124 = f0_2(Bid - ld_100);
                     order_takeprofit_132 = f0_2(ld_260 + ld_100);
                     gi_328 = GetTickCount();
                     bool_16 = OrderModify(OrderTicket(), 0, order_stoploss_124, order_takeprofit_132, datetime_44, Lime);
                     gi_328 = GetTickCount() - gi_328;
                     if (bool_16 > FALSE && TakeShots && (!IsTesting()) && (!gi_288)) f0_5();
                  }
               }
               index_68++;
               break;
            case OP_SELL:
               if (gi_284) {
                  order_stoploss_124 = OrderStopLoss();
                  order_takeprofit_132 = OrderTakeProfit();
                  if (order_takeprofit_132 > f0_2(ld_268 - ld_100) && order_takeprofit_132 - ld_268 + ld_100 > ld_108) {
                     order_stoploss_124 = f0_2(Ask + ld_100);
                     order_takeprofit_132 = f0_2(ld_268 - ld_100);
                     gi_328 = GetTickCount();
                     bool_16 = OrderModify(OrderTicket(), 0, order_stoploss_124, order_takeprofit_132, datetime_44, Orange);
                     gi_328 = GetTickCount() - gi_328;
                     if (bool_16 > FALSE && TakeShots && (!IsTesting()) && (!gi_288)) f0_5();
                  }
               }
               index_68++;
               break;
            case OP_BUYSTOP:
               if (!li_28) {
                  ld_140 = OrderTakeProfit() - OrderOpenPrice() - Commission;
                  if (f0_2(Ask + ld_236) < OrderOpenPrice() && OrderOpenPrice() - Ask - ld_236 > ld_108) {
                     gi_328 = GetTickCount();
                     bool_16 = OrderModify(OrderTicket(), f0_2(Ask + ld_236), f0_2(Bid + ld_236 - ld_140), f0_2(ld_260 + ld_236 + ld_140), 0, Lime);
                     gi_328 = GetTickCount() - gi_328;
                  }
                  index_68++;
               } else OrderDelete(OrderTicket());
               break;
            case OP_SELLSTOP:
            default:
               if (li_28) {
                  ld_140 = OrderOpenPrice() - OrderTakeProfit() - Commission;
                  if (f0_2(Bid - ld_236) > OrderOpenPrice() && Bid - ld_236 - OrderOpenPrice() > ld_108) {
                     gi_328 = GetTickCount();
                     bool_16 = OrderModify(OrderTicket(), f0_2(Bid - ld_236), f0_2(Ask - ld_236 + ld_140), f0_2(ld_268 - ld_236 - ld_140), 0, Orange);
                     gi_328 = GetTickCount() - gi_328;
                  }
                  index_68++;
               } else OrderDelete(OrderTicket());
            }
         }
      }
      li_unused_24 = 0;
      if (gi_312 >= 0 || gi_312 == -2) {
         li_52 = NormalizeDouble(Bid / Point, 0);
         li_56 = NormalizeDouble(Ask / Point, 0);
         if (li_52 % 10 != 0 || li_56 % 10 != 0) gi_312 = -1;
         else {
            if (gi_312 >= 0 && gi_312 < 10) gi_312++;
            else gi_312 = -2;
         }
      }
      if (index_68 == 0 && li_64 != 0 && f0_2(ld_276) <= f0_2(MaxSpread * Point) && gi_312 == -1) {
         if (li_64 < 0) {
            gi_328 = GetTickCount();
            if (li_20) {
               price_76 = Ask + gi_296 * Point;
               if (NDDmode) {
                  ticket_40 = OrderSend(symbol_8, OP_BUYSTOP, g_lots_352, price_76, g_slippage_304, 0, 0, OrderCmt, Magic, 0, Lime);
                  if (OrderSelect(ticket_40, SELECT_BY_TICKET)) OrderModify(OrderTicket(), OrderOpenPrice(), price_76 - StopLoss * Point, price_76 + TakeProfit * Point, datetime_44, Lime);
               } else {
                  ticket_40 = OrderSend(symbol_8, OP_BUYSTOP, g_lots_352, price_76, g_slippage_304, price_76 - StopLoss * Point, price_76 + TakeProfit * Point, OrderCmt, Magic, datetime_44,
                     Lime);
               }
               if (ticket_40 < 0) {
                  li_unused_24 = 1;
                  Print("ERROR BUYSTOP : " + f0_0(Ask + ld_236) + " SL:" + f0_0(Bid + ld_236 - ld_116) + " TP:" + f0_0(ld_260 + ld_236 + ld_116));
                  gi_328 = 0;
               } else {
                  gi_328 = GetTickCount() - gi_328;
                  PlaySound("news.wav");
                  Print("BUYSTOP : " + f0_0(Ask + ld_236) + " SL:" + f0_0(Bid + ld_236 - ld_116) + " TP:" + f0_0(ld_260 + ld_236 + ld_116));
               }
            } else {
               if (Bid - ilow_156 > 0.0) {
                  ticket_40 = OrderSend(symbol_8, OP_BUY, g_lots_352, Ask, g_slippage_304, 0, 0, OrderCmt, Magic, datetime_44, Lime);
                  if (ticket_40 < 0) {
                     li_unused_24 = 1;
                     Print("ERROR BUY Ask:" + f0_0(Ask) + " SL:" + f0_0(Bid - ld_116) + " TP:" + f0_0(ld_260 + ld_116));
                     gi_328 = 0;
                  } else {
                     bool_16 = OrderModify(ticket_40, 0, f0_2(Bid - ld_116), f0_2(ld_260 + ld_116), datetime_44, Lime);
                     gi_328 = GetTickCount() - gi_328;
                     PlaySound("news.wav");
                     Print("BUY Ask:" + f0_0(Ask) + " SL:" + f0_0(Bid - ld_116) + " TP:" + f0_0(ld_260 + ld_116));
                  }
               }
            }
         } else {
            if (li_64 > 0) {
               if (li_20) {
                  price_84 = Bid - gi_296 * Point;
                  gi_328 = GetTickCount();
                  if (NDDmode) {
                     ticket_40 = OrderSend(symbol_8, OP_SELLSTOP, g_lots_352, price_84, g_slippage_304, 0, 0, OrderCmt, Magic, 0, Orange);
                     if (OrderSelect(ticket_40, SELECT_BY_TICKET)) OrderModify(OrderTicket(), OrderOpenPrice(), price_84 + StopLoss * Point, price_84 - TakeProfit * Point, datetime_44, Orange);
                  } else {
                     ticket_40 = OrderSend(symbol_8, OP_SELLSTOP, g_lots_352, price_84, g_slippage_304, price_84 + StopLoss * Point, price_84 - TakeProfit * Point, OrderCmt, Magic, datetime_44,
                        Orange);
                  }
                  if (ticket_40 < 0) {
                     li_unused_24 = 1;
                     Print("ERROR SELLSTOP : " + f0_0(Bid - ld_236) + " SL:" + f0_0(Ask - ld_236 + ld_116) + " TP:" + f0_0(ld_268 - ld_236 - ld_116));
                     gi_328 = 0;
                  } else {
                     gi_328 = GetTickCount() - gi_328;
                     PlaySound("news.wav");
                     Print("SELLSTOP : " + f0_0(Bid - ld_236) + " SL:" + f0_0(Ask - ld_236 + ld_116) + " TP:" + f0_0(ld_268 - ld_236 - ld_116));
                  }
               } else {
                  if (ihigh_148 - Bid < 0.0) {
                     ticket_40 = OrderSend(symbol_8, OP_SELL, g_lots_352, Bid, g_slippage_304, 0, 0, OrderCmt, Magic, datetime_44, Orange);
                     if (ticket_40 < 0) {
                        li_unused_24 = 1;
                        Print("ERROR SELL Bid:" + f0_0(Bid) + " SL:" + f0_0(Ask + ld_116) + " TP:" + f0_0(ld_268 - ld_116));
                        gi_328 = 0;
                     } else {
                        bool_16 = OrderModify(ticket_40, 0, f0_2(Ask + ld_116), f0_2(ld_268 - ld_116), datetime_44, Orange);
                        gi_328 = GetTickCount() - gi_328;
                        PlaySound("news.wav");
                        Print("SELL Bid:" + f0_0(Bid) + " SL:" + f0_0(Ask + ld_116) + " TP:" + f0_0(ld_268 - ld_116));
                     }
                  }
               }
            }
         }
      }
      if (gi_312 >= 0) Comment("Robot is initializing...");
      else {
         if (gi_312 == -2) Comment("ERROR -- Instrument " + symbol_8 + " prices should have " + g_digits_300 + " fraction digits on broker account");
         else {
            ls_0 = TimeToStr(TimeCurrent()) + " Tick: " + f0_9(g_count_320);
            if (Show_Debug || Verbose) {
               ls_0 = ls_0 
               + "\n*** DEBUG MODE *** \nVolatility: " + f0_0(ld_212) + ", VolatilityLimit: " + f0_0(VolatilityLimit) + ", VolatilityPercentage: " + f0_0(ld_92);
               ls_0 = ls_0 
               + "\nPriceDirection: " + StringSubstr("BUY NULLSELL", li_64 * 4 + 4, 4) + ", ImaHigh: " + f0_0(ld_172) + ", ImaLow: " + f0_0(ld_164) + ", BBandUpper: " + f0_0(ibands_188);
               ls_0 = ls_0 + ", BBandLower: " + f0_0(ibands_196) + ", Expire: " + TimeToStr(datetime_44, TIME_MINUTES) + ", NnumOrders: " + index_68;
               ls_0 = ls_0 
               + "\nTrailingLimit: " + f0_0(ld_236) + ", TrailingDist: " + f0_0(ld_100) + "; TrailingStart: " + f0_0(ld_108) + ", UseStopOrders: " + li_20;
            }
            ls_0 = ls_0 
            + "\nBid: " + f0_0(Bid) + ", Ask: " + f0_0(Ask) + ", AvgSpread: " + f0_0(ld_252) + ", Commission: " + f0_0(Commission) + ", RealAvgSpread: " + f0_0(ld_276) + ", Lots: " + f0_6(g_lots_352,
               li_48) + ", Execution: " + gi_328 + " ms";
            if (f0_2(ld_276) > f0_2(MaxSpread * Point)) {
               ls_0 = ls_0 
                  + "\n" 
               + "The current spread (" + f0_0(ld_276) + ") is higher than what has been set as MaxSpread (" + f0_0(MaxSpread * Point) + ") so no trading is allowed right now on this currency pair!";
            }
            Comment(ls_0);
            if (index_68 != 0 || li_64 != 0 || Verbose) f0_1(ls_0);
         }
      }
   }
}

// 9B1AEE847CFB597942D106A4135D4FE6
void f0_11(double &ada_0[30], double &ada_4[30], int &aia_8[30], double a_pips_12) {
   if (aia_8[0] == 0 || MathAbs(Bid - ada_0[0]) >= a_pips_12 * Point) {
      for (int li_20 = 29; li_20 > 0; li_20--) {
         ada_0[li_20] = ada_0[li_20 - 1];
         ada_4[li_20] = ada_4[li_20 - 1];
         aia_8[li_20] = aia_8[li_20 - 1];
      }
      ada_0[0] = Bid;
      ada_4[0] = Ask;
      aia_8[0] = GetTickCount();
   }
}

// 09CBB5F5CE12C31A043D5C81BF20AA4A
string f0_0(double ad_0) {
   return (DoubleToStr(ad_0, g_digits_300));
}

// 58B0897F29A3AD862616D6CBF39536ED
string f0_6(double ad_0, int ai_8) {
   return (DoubleToStr(ad_0, ai_8));
}

// 28EFB830D150E70A8BB0F12BAC76EF35
double f0_2(double ad_0) {
   return (NormalizeDouble(ad_0, g_digits_300));
}

// 78BAA8FAE18F93570467778F2E829047
string f0_9(int ai_0) {
   if (ai_0 < 10) return ("00" + ai_0);
   if (ai_0 < 100) return ("0" + ai_0);
   return ("" + ai_0);
}

// 6ABA3523C7A75AAEA41CC0DEC7953CC5
double f0_8(double ad_0, double ad_8) {
   return (MathLog(ad_8) / MathLog(ad_0));
}

// 2569208C5E61CB15E209FFE323DB48B7
void f0_1(string as_0) {
   int li_8;
   int li_12 = -1;
   while (li_12 < StringLen(as_0)) {
      li_8 = li_12 + 1;
      li_12 = StringFind(as_0, 
      "\n", li_8);
      if (li_12 == -1) {
         Print(StringSubstr(as_0, li_8));
         return;
      }
      Print(StringSubstr(as_0, li_8, li_12 - li_8));
   }
}

// D1DDCE31F1A86B3140880F6B1877CBF8
void f0_14() {
   string ls_unused_0;
   string ls_8;
   double ask_16;
   gi_332 = 0;
   for (int index_24 = 0; index_24 != gi_332; index_24++) {
      ls_8 = gsa_272[index_24];
      ask_16 = MarketInfo(ls_8 + Suffix, MODE_ASK);
      if (ask_16 != 0.0) {
         gi_332++;
         ArrayResize(gsa_276, gi_332);
         gsa_276[gi_332 - 1] = ls_8;
      } else Print("The broker does not support ", ls_8);
   }
}

// AA5EA51BFAC7B64E723BF276E0075513
int f0_13() {
   string ls_0 = Symbol();
   int str_len_8 = StringLen(ls_0);
   int li_12 = 0;
   for (int li_16 = 0; li_16 < str_len_8 - 1; li_16++) li_12 += StringGetChar(ls_0, li_16);
   Magic = AccountNumber() + li_12;
   return (0);
}

// 5710F6E623305B2C1458238C9757193B
void f0_5() {
   int li_0;
   if (ShotsPerBar > 0) li_0 = MathRound(60 * Period() / ShotsPerBar);
   else li_0 = 60 * Period();
   int li_4 = MathFloor((TimeCurrent() - Time[0]) / li_0);
   if (Time[0] != gi_428) {
      gi_428 = Time[0];
      gi_432 = DelayTicks;
   } else
      if (li_4 > gi_436) f0_10("i");
   gi_436 = li_4;
   if (gi_432 == 0) f0_10("");
   if (gi_432 >= 0) gi_432--;
}

// A9B24A824F70CC1232D1C2BA27039E8D
string f0_12(int ai_0, int ai_4) {
   for (string dbl2str_8 = DoubleToStr(ai_0, 0); StringLen(dbl2str_8) < ai_4; dbl2str_8 = "0" + dbl2str_8) {
   }
   return (dbl2str_8);
}

// 945D754CB0DC06D04243FCBA25FC0802
void f0_10(string as_0 = "") {
   gi_440++;
   string ls_8 = "SnapShot" + Symbol() + Period() + "\\" + Year() + "-" + f0_12(Month(), 2) + "-" + f0_12(Day(), 2) + " " + f0_12(Hour(), 2) + "_" + f0_12(Minute(),
      2) + "_" + f0_12(Seconds(), 2) + " " + gi_440 + as_0 + ".gif";
   if (!WindowScreenShot(ls_8, 640, 480)) Print("ScreenShot error: ", ErrorDescription(GetLastError()));
}

// 50257C26C4E5E915F022247BABD914FE
double f0_4(string a_symbol_0) {
   double lotstep_8 = MarketInfo(a_symbol_0, MODE_LOTSTEP);
   double ld_ret_16 = AccountFreeMargin() * Risk / StopLoss / 100.0;
   ld_ret_16 = MathFloor(ld_ret_16 / lotstep_8) * lotstep_8;
   if (ld_ret_16 > MaxLots) ld_ret_16 = MaxLots;
   if (ld_ret_16 < MinLots) ld_ret_16 = MinLots;
   return (ld_ret_16);
}